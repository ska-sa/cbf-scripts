#!/bin/bash

# To run this in test mode use
# CMC_CONFIG=$(pwd)/tests/cmc.conf PATH=$PATH:$(pwd)/ike:$(pwd)/../katcp/kcs:$(pwd)/cmc cmc-start

NAME=cmc

export KATCP_LABEL=${NAME}-start

CONFIGVAR=${NAME^^*}_CONFIG

if [ -z "${!CONFIGVAR}" ] ; then
  export ${CONFIGVAR}=/etc/${NAME}.conf
fi

if [ -f "${!CONFIGVAR}" ] ; then
  source ${!CONFIGVAR}
else
  kcpmsg -l error "unable to locate config file ${!CONFIGVAR}"
  exit 2
fi

if [ "${state/verbose-log/}" != "${state}" ] ; then
  set -x
  #LOGFLAGS="-t -l trace"
  LOGFLAGS="-t"
else
  LOGFLAGS="-a 10"
fi

if [ "${state/retain-path/}" = "${state}" ] ; then
  export PATH=/usr/local/bin:/usr/local/sbin:/bin:/usr/bin/
fi

if [ "${state/tmp-log/}" != "${state}" ] ; then
  export LOGPREFIX=/tmp
else
  export LOGPREFIX=/var/log
fi

LOGFILE=${LOGPREFIX}/${NAME}.kcplog
ERRFILE=${LOGPREFIX}/${NAME}.log

export MALLOC_CHECK_=1
cd /var/tmp
ulimit -c unlimited

export KATCP_SERVER=localhost:${old_port}

if kcpcmd -i -t 2 watchdog >& /dev/null ; then
  kcpmsg -l error "${NAME} already running"
  exit 2
fi

sleep 0.5

if [ "$(whoami)" = "root" ] ; then
  touch ${LOGPREFIX}/skarab-check.log
  touch ${ERRFILE}
  chown ${unprivileged_user:-nobody} ${ERRFILE} ${LOGPREFIX}/skarab-check.log
  su ${unprivileged_user:-nobody} -c "env PATH=$PATH:/usr/local/sbin kcs -d -p ${KATCP_SERVER} -l ${ERRFILE}"
else
  kcs -d -p ${KATCP_SERVER} -l ${ERRFILE}
fi

timeout=10
while ! kcpcmd -i -t 2 watchdog > /dev/null ; do
  if  [ "${timeout}" -gt 0 ] ; then
    sleep 0.5
    timeout=$[timeout-1]
  else
    kcpmsg -l error "unable to contact server"
    exit 2
  fi
done

# this is to deal with old katcp logic, new one should be different
kcpcmd -i listener-create setup ${setup_port} 127.0.0.1
export KATCP_SERVER=localhost:${setup_port}

# top-level katcp interface
kcpcmd -i group-create hardware
kcpcmd -i listener-create hardware ${hardware_port} ${bind_interface:-0.0.0.0} hardware

kcpcmd -i group-create primary
kcpcmd -i listener-create primary ${primary_port} ${bind_interface:-0.0.0.0} primary
export KATCP_SERVER=${bind_interface:-localhost}:${primary_port}

# configure top-level/primary group
kcpcmd -i scope global group primary

# logging can now be started
kcplog ${LOGFLAGS} -d -o ${LOGFILE}

kcpcmd -i client-exec primary primary ${NAME}-primary
kcpcmd -i client-exec corr primary ${NAME}-null
# pick between herder and hardware
kcpcmd -i client-exec support hardware ${NAME}-hardware
#kcpcmd -i client-exec herder primary ${NAME}-herder
kcpcmd -i client-config info-none corr
kcpcmd -i client-config client corr

# start the ntp monitor
if [ "${state/no-time/}" = "${state}" ] ; then
  kcpcmd -i client-exec time primary tmon
  kcpcmd -i client-config client time
fi

function kfwd()
{
  kcpcmd -i forward-symbolic $1 $2
  kcpcmd -i cmd-help $1 "$3"
}

# kfwd resource-mark       primary  "set availability of a processing resource (?resource-mark resource marking)"
# kfwd resource-list       primary  "show processing resources (?resource-list [resource])"
#
# kfwd subordinate-halt    primary  "halt a subarray (?subordinate-halt [subarray])"
# kfwd subordinate-list    primary  "show subarrays (?subordinate-list)"
# kfwd subordinate-create  primary  "define and launch a subarray (?subordinate-create subarray [inputs]*)"
#
# # moved from suordinate to primary
# kfwd instrument-list     primary  "show available instruments (?instrument-list)"
#
# kfwd cmc-halt            primary  "power down the cmc server (?cmc-halt)"

kcpcmd -i cmd-delete halt

# backward compatebility
kcpcmd -i forward-symbolic array-halt          primary subordinate-halt %1+
kcpcmd -i cmd-help         array-halt         "halt a subarray (?array-halt [subordinate])"
kcpcmd -i forward-symbolic array-list          primary subordinate-list %1+
kcpcmd -i cmd-help         array-list         "show running subarray (?array-list)"
kcpcmd -i forward-symbolic array-assign        primary subordinate-create %1+
kcpcmd -i cmd-help         array-assign       "define and launch a subarray (?array-assign subarray [inputs]*)"

# forward compatebility
#kcpcmd -i forward-symbolic sync-epoch               subordinate synchronisation-epoch %1+
#kcpcmd -i cmd-help         sync-epoch              "set the start of the epoch (?sync-epoch epoch)"

#kcpcmd -i forward-symbolic digitiser-synch-epoch    subordinate synchronisation-epoch %1+
#kcpcmd -i cmd-help         digitiser-synch-epoch   "internal synchronisation interface (?digitiser-synch-epoch epoch)"

if [ -n "${server_part}" ] ; then
  kcpcmd -i var-declare 'cbf-server*' map,version
  kcpcmd -i var-set cbf-server ${server_part} string :version
fi

kcpcmd -i var-declare 'katcp-device*' map,version
kcpcmd -i var-set katcp-device ${device_api:-unknown} string :version
kcpcmd -i var-set katcp-device ${device_build:-unknown} string :build

kcpcmd -i var-declare "*device-status*" sensor,map
kcpcmd -i var-set "*device-status*" ok string :value
kcpcmd -i var-set "*device-status*" "correlator master controller health" string :help
kcpcmd -i var-set "*device-status*" nominal string :status
kcpcmd -i var-set "*device-status*" discrete string :type

kcpcmd -i var-set "*device-status*" ok       string ":range#0"
kcpcmd -i var-set "*device-status*" degraded string ":range#1"
kcpcmd -i var-set "*device-status*" fail     string ":range#2"

# switch back to default/setup, this will be used to clone subordinates
export KATCP_SERVER=localhost:${setup_port}

# kfwd digitiser-synch-epoch subordinate  "digitiser synchronisation time (?digitiser-synch-epoch time)"
#
# kfwd instrument-list       subordinate  "show fielded instruments (?instrument-list)"
# kfwd instrument-probe      subordinate  "check resources for an instrument (?instrument-probe instrument)"
# kfwd instrument-activate   subordinate  "launch the specified instrument (?instrument-activate instrument)"

# might have to glue all corr-* capture-list output together
kfwd capture-list        corr "list data products"
kfwd capture-destination corr "set data stream destination (?capture-destination stream data-destination)"
kfwd capture-start       corr "start data stream output (?capture-start stream)"
kfwd capture-stop        corr "stop data stream output (?capture-stop stream)"
kfwd capture-meta        corr "reissue stream meta-data (?capture-meta stream)"

kfwd vacc-sync           corr "resynchronise vector accumulators (?vacc-sync)"
#kfwd input-labels        corr "set names of all inputs (?input-labels inputs [name]*)"
kfwd gain                corr "set gain factors (?gain input [values])"
kfwd gain-all            corr "set gain factors (?gain-all [values])"
kfwd delays              corr "set delay and fringe correction (?delays stream-name unix-time [coefficient-set]*)"
kfwd frequency-select    corr "set the center of the frequency band (?frequency-select stream center frequency)"

# request by martin: inhibit accumulation length
kfwd accumulation-length corr "set the integration interval (?accumulation length period)"

kfwd beam-weights        corr "set the beam weigths (?beam-weights beam [values]*)"
kfwd beam-passband       corr "set the beam passband (?beam-passband beam bandwidth center frequency)"
kfwd beam-quant-gains    corr "set the quantiser gain for a beam (?beam-quant-gain beam [gain])"
#kfwd quantiser-singlechan-snapshot  corr "retrieve quantiser data for a single channel (?quantiser-singlechan-snapshot source channel)"

kfwd adc-snapshot        corr "retrieve a snapshot of ADC data for a specific input (?adc-snapshot input-label [unix-time])"
kfwd transient-buffer-trigger  corr "trigger the transient buffer for all inputs (?transient-buffer-trigger)"

kfwd quantiser-snapshot  corr            "retrieve quantiser data (?quantiser-snapshot source)"
kfwd quantiser-singlechan-snapshot  corr "retrieve quantiser data for a single channel (?quantiser-singlechan-snapshot source channel)"
kfwd fft-shift           corr            "set the FFT shift value (?fft-shift [value])"

#kfwd digitiser-synch-epoch corr "internal synchronisation interface"
