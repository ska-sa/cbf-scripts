#!/bin/bash

#################################################

if [ -n "$1" ] ; then
  export KATCP_LABEL="cmc-${1}"
  export SUBARRAY=${1}
else
  export KATCP_LABEL=cmc-subordinate
  export SUBARRAY=unknown
fi

#################################################

# valid command names and their minimum parameter count
declare -A -r command_set=([synchronisation-epoch]=1 [instrument-activate]=2 [instrument-list]=1)
declare -A -r command_help=([synchronisation-epoch]="digitiser synchronisation time (?synchronisation-epoch time)" [instrument-activate]="launch the specified instrument (?instrument-activate instrument)" [instrument-list]="show fielded instruments (?instrument-list)")

#################################################

source cmc-lib.sh
source cmc-resource.sh
source cmc-instrument.sh

#################################################

function make_sync_sensor()
{
  local value epoch status

  kcpmsg -l debug "initialising synchronisation variable"

  push_failure

  send_request   var-declare "*synchronisation-epoch*" sensor,map
  retrieve_reply var-declare

  send_request   var-set "*synchronisation-epoch*" "synchronisation time" string :help
  retrieve_reply var-set

  send_request   var-set "*synchronisation-epoch*"  float string :type
  retrieve_reply var-set

  send_request   var-set "*synchronisation-epoch*"  unknown string :status
  retrieve_reply var-set

  send_request   var-set "*synchronisation-epoch*"  0 string :value
  retrieve_reply var-set

  if ! pop_failure  ; then
    kcpmsg -l error "unable to generate synchronisation-epoch sensor"
    return 1
  fi

  return 0
}

### support functions: sensors ##########################

function make_misc_sensors()
{
  push_failure

  send_request   var-declare "*device-status*"      "sensor,map"
  retrieve_reply var-declare

  send_request   var-set device-status   "system\_health" string ":help"
  retrieve_reply var-set
  send_request   var-set device-status    discrete   string ":type"
  retrieve_reply var-set
  send_request   var-set device-status    nominal    string ":status"
  retrieve_reply var-set
  send_request   var-set device-status    ok         string ":value"
  retrieve_reply var-set

  send_request   var-set device-status    ok         string ":range#0"
  retrieve_reply var-set
  send_request   var-set device-status    degraded   string ":range#1"
  retrieve_reply var-set
  send_request   var-set device-status    fail       string ":range#2"
  retrieve_reply var-set


  send_request   var-declare "*instrument-state*"    "sensor,map"
  retrieve_reply var-declare

  send_request   var-set instrument-state "subarray\_instrument\_state" string :help
  retrieve_reply var-set
  send_request   var-set instrument-state string     string ":type"
  retrieve_reply var-set
  send_request   var-set instrument-state unknown    string ":status"
  retrieve_reply var-set
  send_request   var-set instrument-state none       string ":value"
  retrieve_reply var-set

  if ! pop_failure  ; then
    kcpmsg -l warn "unable to initialse status sensors"
    return 1
  fi

  return 0
}

function adjust_sensors()
{
  local status value

  if [ "$#" -lt 1 ] ; then
    status="error"
    value=""
  elif [ "$#" -eq 1 ] ; then
    status="$1"
    value=""
  else
    status="$1"
    value="$2"
  fi

  push_failure

# TODO: update device-status too

  send_request   var-set instrument-state "${status}" string :status
  retrieve_reply var-set

  if [ -n "${value}" ] ; then
    send_request   var-set instrument-state "${value}" string :value
    retrieve_reply var-set
  fi

  if ! pop_failure  ; then
    kcpmsg -l error "unable to update instrument-sensor"
    return 1
  fi

  return 0
}

### support functions: subscibe to servlet ##############

function activate_servlet_sensors()
{
  local key remote

  remote=$1

  if [ -z "${remote}" ] ; then
    kcpmsg "need a remote party to query"
    return 1
  fi

  push_failure

  send_request relay "${remote}" relay "${remote}" sensor-list
  retrieve_inform relay

  if ! pop_failure  ; then
    kcpmsg -l warn "unable to interrogate sensors of ${remote}"
    return 1
  fi

  push_failure

# risky, we assume inform_result isn't clobbered
  for key in "${!inform_result[@]}" ; do
    send_request relay "${remote}" relay "${remote}" sensor-sampling "${key}" "auto"
    retrieve_inform relay
  done

  if ! pop_failure ; then
    kcpmsg -l warn "unable to subscribe to sensors of ${remote}"
    return 1
  fi

  return 0
}

### support functions: export INPUT? variables ##########

function retrieve_inputs()
{
  local geometry key suffix instrument template count

  instrument=$1

  if [ -z "${instrument}" ] ; then
    kcpmsg -l fatal "no instrument given"
    return 1
  fi

# TODO: check if instrument is enabled
#  if [ "${#instruments_deployed[@]}" -le 0 ] ; then
#    kcpmsg -l fatal "no instruments deployed"
#    return 1
#  fi

  template="${CORR_TEMPLATE}/${instrument}"

  kcpmsg -l debug "checking templates for instrument ${instrument}"

  if [ ! -f "${template}" ] ; then
    kcpmsg -l error "no template available for instrument ${instrument}"
    return 1
  fi

  count=$(ike -o -k source_mcast_ips ${template} | tr ',' '\n' | sort -u | wc -l)

  kcpmsg -l debug "instrument ${instrument} requires ${count} inputs"

  push_failure

  fetch_var "inputs"

  if ! pop_failure ; then
    kcpmsg -l error "unable to determine number of inputs"
    return 1
  fi

  geometry="${#var_result[*]}"

  if [ "${geometry}" -le 0 ] ; then
    kcpmsg -l error "regarding ${geometry} as an unreasonable number of inputs"
    return 1
  fi

  if [ "${geometry}" -ne "${count}" ] ; then
    kcpmsg -l error "instrument ${instrument} requires ${count} inputs but we have only been given ${geometry}"
    return 1
  fi

  for key in "${!var_result[@]}" ; do
    suffix=${key##*#}
    export INPUT${suffix}="${var_result[${key}]}"
  done

  return 0
}

#########################################################
### api functions ### sync epoch ########################

function synchronisation_epoch()
{
  local epoch

  shift

  if [ "$#" -lt 1 ] ; then
    kcpmsg -l warn "require an epoch to set where value is available in synchronisation-epoch sensor"
    echo "!synchronisation-epoch fail"
    return 1
  fi

  epoch="$1"

  push_failure

  send_request   var-set "*synchronisation-epoch*"  "${epoch}"  string :value
  retrieve_reply var-set

  send_request   var-set "*synchronisation-epoch*" nominal string :status
  retrieve_reply var-set

  if ! pop_failure  ; then
    kcpmsg -l warn "unable to set epoch variable"
    echo "!synchronisation-epoch fail"
    return 1
  fi

  kcpmsg -l info "will use epoch ${epoch}"


  echo "!synchronisation-epoch ok"
}

#########################################################
### api functions ### instrument ########################

function instrument_activate()
{
  local instrument art resource t n nextport label status
  local -A wants
  local epoch extras

  shift

  instrument=$1

  if [ -z "${SUBARRAY}" ] ; then
    kcpmsg -l error "unable to identify own subarray while activating instrument ${instrument}"
    echo "!instrument-activate fail read-logs"
    adjust_sensors
    return 1
  fi

  if [ -n "${INSTRUMENT}" ] ; then
    kcpmsg -l error "unable to launch another instrument ${instrument} as only one instrument per subordinate is supported"
    echo "!instrument-activate fail already-exists"
    adjust_sensors
    return 1
  fi

  INSTRUMENT=${instrument}
  export INSTRUMENT

  if ! retrieve_inputs "${instrument}" ; then
    kcpmsg -l error "encountered problem initialising inputs for instrument ${instrument}"
    echo "!instrument-activate fail read-logs"
    adjust_sensors
    return 1
  fi
# NOW we should have INPUT? in environment

  if ! compute_resources "${instrument}" ; then
    kcpmsg -l error "unable to allocate resources needed by ${instrument}"
    echo "!instrument-activate fail read-logs"
    adjust_sensors
    return 1
  fi
# NOW we should have SKARAB? and ROACH? in environment

  PORT=$(seq ${corr_base} ${corr_end} | grep -E -v -w $(netstat -tan | tr -s ' ' | grep '^tcp '  | cut -f4 -d ' '  | cut -f2 -d: | sort -nu | tr '\n' '|')0 | head -1)
  export PORT

  kcpmsg "selecting port ${PORT} for instrument ${INSTRUMENT} of array ${SUBARRAY}"

  if ! cmc-config ${CORR_TEMPLATE}/${INSTRUMENT} ${CORR_DIR}/${SUBARRAY}-${INSTRUMENT} ; then
    kcpmsg -l error "unable to generate config for instrument ${INSTRUMENT} in subarray ${SUBARRAY}"
    echo "!instrument-activate fail read-logs"
    adjust_sensors
    return 1
  fi

### TODO: organise multicast ranges

  push_failure

  send_request   client-exec ${SUBARRAY}-${INSTRUMENT} ${SUBARRAY} kcprun -o auto corr2_servlet.py -p ${PORT}
  retrieve_reply client-exec

  send_request   client-config client ${SUBARRAY}-${INSTRUMENT}
  retrieve_reply client-config

  sleep 3

  label=instrument

  send_request   client-connect localhost:${PORT} "${SUBARRAY}" "${label}"
  retrieve_reply client-connect

  send_request   client-config client "${label}"
  retrieve_reply client-config

  send_request   client-config fixed  "${label}"
  retrieve_reply client-config

  send_request   client-config version-prepend "${label}"
  retrieve_reply client-config

  if ! pop_failure ; then
    kcpmsg -l error "unable to launch servlet for instrument ${INSTRUMENT}"
    echo "!instrument-activate fail task-start"
# TODO: halt the servlet
    adjust_sensors
    return 1
  fi

# TODO would be nice to use internal relay, but no timeout ...
  if ! kcpcmd -i -k -f -t 300 -r -s localhost:${PORT} create ${CORR_DIR}/${SUBARRAY}-${INSTRUMENT} ; then
    kcpmsg -l error "unable to load config for instrument ${INSTRUMENT} in subarray ${SUBARRAY}"
    echo "!instrument-activate fail read-logs"
    adjust_sensors
    return 1
  fi

  push_failure

  fetch_var "synchronisation-epoch"

  if ! pop_failure ; then
# we probably should terminate here
    kcpmsg -l error "no synchronisation epoch seems to be set"
  else
    kcpmsg -l info "got a synchronisation epoch"

    if [ "${var_result[synchronisation-epoch:status]}" != nominal ] ; then
      kcpmsg -l error "synchronisation epoch is not nominal"
    fi

    epoch="${var_result[synchronisation-epoch:value]}"

    if [ "${epoch%%.*}" -gt 0 ] ; then
# TODO: will this command get re-named too ? 
      if kcpcmd -i -k -f -r -s localhost:${PORT} digitiser-synch-epoch "${epoch}" ; then
        kcpmsg "preliminary sync epoch set to ${epoch}"
      else
        kcpmsg -l error "servlet unwilling to accept epoch ${epoch}"
        echo "!instrument-activate fail read-logs"
        adjust_sensors
        return 1
      fi
    fi

  fi

  shift

  extras="$*"
  if [ -z "${extras}" ] ; then
# warning - hack, this disables qdr callibration
    extras="1 0 1 0"
  fi

  kcpmsg -l warn "waiting for initialisation ${extras} ... patience"

  if ! kcpcmd -i -k -f -t 300 -r -s localhost:${PORT} initialise ${extras} ; then
    kcpmsg -l error "unable to initialise instrument ${INSTRUMENT} with options ${extras}"
    echo "!instrument-activate fail read-logs"
    adjust_sensors
    return 1
  fi

  push_failure

#  send_request   client-config prefixed "${label}"
#  retrieve_reply client-config

#  send_request   client-config native "${label}"
#  retrieve_reply client-config

  send_request   relay "${label}" relay "${label}" version-list
  retrieve_reply relay

#  send_request   client-config fixed "${label}"
#  retrieve_reply client-config

  if ! pop_failure ; then
    kcpmsg -l warn "unable to retrieve version information"
    status=warn
  fi

  push_failure

  send_request   client-rename corr "${label}"
  retrieve_reply client-rename

  if ! pop_failure ; then
    kcpmsg -l warn "unable to relabel and configure servlet"
# TODO: kill the corr instance to release resources
    echo "!instrument-activate fail read-logs"
    adjust_sensors
    return 1
  fi

  label=corr

  status=nominal
  if [ "${state/no-sensors/}" = "${state}" ] ; then
    extraport=$(seq ${corr_base} ${corr_end} | grep -E -v -w $(netstat -tan | tr -s ' ' | grep '^tcp '  | cut -f4 -d ' '  | cut -f2 -d: | sort -nu | tr '\n' '|')0 | head -1)

    kcpmsg "selecting ${extraport} for sensor routines"

    push_failure

    send_request   client-exec "monitor-${SUBARRAY}-${INSTRUMENT}" "${SUBARRAY}" kcprun -e debug -o debug -n "CORR2INI=${CORR_DIR}/${SUBARRAY}-${INSTRUMENT}" corr2_sensor_servlet.py -p "${extraport}"
    retrieve_reply client-exec

    send_request   client-config client "monitor-${SUBARRAY}-${INSTRUMENT}"
    retrieve_reply client-config

    sleep 2

    label=monitor

    send_request   client-connect "localhost:${extraport}" "${SUBARRAY}" "${label}"
    retrieve_reply client-connect

    send_request   relay "${label}" relay "${label}" watchdog
    retrieve_reply relay

    send_request   client-config client   "${label}"
    retrieve_reply client-config

    send_request   client-config fixed    "${label}"
    retrieve_reply client-config

    if pop_failure ; then
      if ! activate_servlet_sensors "${label}" ; then
        kcpmsg -l warn "unable to subscribe to sensors of ${label}"
        status=warn
      fi
    else
      kcpmsg -l warn "sensors loop initialisation failed for instrument ${INSTRUMENT} but going on anyway"
      status=warn
    fi

  else
    kcpmsg -l warn "sensor servlet inhibited by configuration"
  fi

  kcpmsg "instrument activated"

  echo "!instrument-activate ok"
  adjust_sensors "${status}" "${instrument}"
}

# old interface: instrument list ########################

function instrument_list()
{
  local -A availability size instruments inputs outputs bandwidth_in bandwidth_out channels
  local key products prefix instrument problem tmp

  shift

  push_failure

  if [ -n "$1" ] ; then
    fetch_var "instruments:$1"
  else
    fetch_var "instruments"
  fi

  if ! pop_failure ; then
    kcpmsg -l error "unable to retrieve instrument list"
    echo "!instrument-list fail read-logs"
    return 1
  fi

  for key in "${!var_result[@]}" ; do
    # extract instrument ID
    tmp=${key#instruments:}
    instrument=${tmp%%:*}

    prefix="instruments:${instrument}"

    instruments[${instrument}]=0

    # extract output products
    if [ "${key%#*}" == "${prefix}:output-products" ] ; then
      if [ -z "${outputs[${instrument}]}" ] ; then
        outputs[${instrument}]=${var_result[$key]}
      else
        outputs[${instrument}]="${outputs[${instrument}]} ${var_result[$key]}"
      fi
    fi
  done

  problem=""
  for instrument in "${!instruments[@]}" ; do
    #check if some instrument field is missing
    if [ -z "${outputs[${instrument}]}" ] ; then
      kcpmsg -l error "incomplete information for instrument ${instrument}"
      problem="${instrument}"
    else
      echo "#instrument-list ${instrument[${instrument}]} ${outputs[${instrument}]}"
    fi
  done

  if [ -n "${problem}" ] ; then
    echo "!instrument-list fail read-logs"
    return 1
  fi

  echo "!instrument-list ok"
}

#########################################################

inhibit_logging
register_commands subordinate

make_sync_sensor
make_misc_sensors

#################################################

main_loop

# function update_git_versions()
# {
#   local v
#
#   v=$(cd ${BITSTREAM_DIR:-/srv/mkat_fpga} ; git describe --always --tags --long --dirty)
#
#   if [ -n "${v}" ] ; then
#     echo "?var-set gateware-images* ${v} string"
#     get_katcp_reply var-set
#   fi
#
#
#   v=$(cd ${CORR_TEMPLATE} ; git describe --always --tags --long --dirty)
#
#   if [ -n "${v}" ] ; then
#     echo "?var-set correlator-configs* ${v} string"
#     get_katcp_reply var-set
#   fi
# }
#

