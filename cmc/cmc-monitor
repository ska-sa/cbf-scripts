#!/bin/bash

#################################################

export KATCP_LABEL=cmc.subordinate
export SUBARRAY=unknown

if [ -n "$1" ] ; then
  export KATCP_LABEL="${1}.cmc"
  export SUBARRAY=${1}
  if [ -n "$2" ] ; then
    export INSTRUMENT="$2"
  fi
fi

#################################################

# valid command names and their minimum parameter count
declare -A -r command_set=([monitor-info]=1)
declare -A -r command_help=([monitor-info]="display monitor details")
declare -A -r inform_set=([relay]=1)

#################################################

source cmc-lib.sh
source cmc-resource.sh
source cmc-instrument.sh

#################################################

### support functions: sensors ##########################

function make_misc_sensors()
{
  push_failure

  send_request   var-declare "*device-status*"      "sensor,map"
  retrieve_reply var-declare

  send_request   var-set device-status   "system\_health" string ":help"
  retrieve_reply var-set
  send_request   var-set device-status    discrete   string ":type"
  retrieve_reply var-set
  send_request   var-set device-status    nominal    string ":status"
  retrieve_reply var-set
  send_request   var-set device-status    ok         string ":value"
  retrieve_reply var-set

  send_request   var-set device-status    ok         string ":range#0"
  retrieve_reply var-set
  send_request   var-set device-status    degraded   string ":range#1"
  retrieve_reply var-set
  send_request   var-set device-status    fail       string ":range#2"
  retrieve_reply var-set

  return 0
}

function adjust_sensors()
{
  local status value

  if [ "$#" -lt 1 ] ; then
    status="error"
    value=""
  elif [ "$#" -eq 1 ] ; then
    status="$1"
    value=""
  else
    status="$1"
    value="$2"
  fi

#   push_failure
#
# # TODO: update device-status too
#
#   send_request   var-set instrument-state "${status}" string :status
#   retrieve_reply var-set
#
#   if [ -n "${value}" ] ; then
#     send_request   var-set instrument-state "${value}" string :value
#     retrieve_reply var-set
#   fi
#
#   if ! pop_failure  ; then
#     kcpmsg -l error "unable to update instrument-sensor"
#     return 1
#   fi

  return 0
}

### support functions: subscibe to servlet ##############

function relay()
{
  shift

  if [ "$#" -ne 5 ] ; then
    kcpmsg -l info "odd sensor status update $*"
    return
  fi

  if [ "$1" != 1 ] ; then
    kcpmsg -l info "malformed sensor status update $*"
    return
  fi

  echo "#sensor-status $*"
}

function activate_servlet_sensors()
{
  local key remote

  remote=$1

  if [ -z "${remote}" ] ; then
    kcpmsg "need a remote party to query"
    return 1
  fi

  push_failure

  send_request relay "${remote}" relay "${remote}" sensor-list
  retrieve_inform relay

  if ! pop_failure  ; then
    kcpmsg -l warn "unable to interrogate sensors of ${remote}"
    return 1
  fi

  push_failure

# risky, we assume inform_result isn't clobbered
  for key in "${!inform_result[@]}" ; do
    send_request relay "${remote}" relay "${remote}" sensor-sampling "${key}" "auto"
    retrieve_inform relay
  done

  if ! pop_failure ; then
    kcpmsg -l warn "unable to subscribe to sensors of ${remote}"
    return 1
  fi

#   push_failure
# 
#   for key in "${!inform_result[@]}" ; do
#     send_request relay "${remote}" relay "${remote}" sensor-value
#     retrieve_inform relay
#   done
# 
#   if ! pop_failure ; then
#     kcpmsg -l warn "unable to retrieve initial sensor values from ${remote}"
#     return 1
#   fi

  return 0
}

function launch_sensors()
{
  local port status legit i timeout now

  if [ -z "${SUBARRAY}" ] ; then
    kcpmsg -l error "unable to identify own subarray while launching sensors"
    adjust_sensors
    return 1
  fi

  if [ -z "${INSTRUMENT}" ] ; then
    kcpmsg -l error "no instrument given for ${SUBARRAY} thus unable to launch sensors"
    adjust_sensors
    return 1
  fi

  legit=""
  for i in ${instruments_deployed[@]} ; do
    if [ "${i}" = "${INSTRUMENT}" ] ; then
      legit="${i}"
    fi
  done

  if [ -z "${legit}" ] ; then
    kcpmsg -l error "instrument ${INSTRUMENT} is not currently deployed thus refusing to launch sensors"
    adjust_sensors
    return 1
  fi

  if [ "${state/no-sensors/}" != "${state}" ] ; then
    kcpmsg -l error "sensor logic currently inhibited in cmc config"
    adjust_sensors
    return 1
  fi

  port=$(seq ${corr_base} ${corr_end} | grep -E -v -w $(netstat -tan | tr -s ' ' | grep '^tcp '  | cut -f4 -d ' '  | cut -f2 -d: | sort -nu | tr '\n' '|')0 | head -1)

  kcpmsg "selecting ${port} for sensor routines of instrument ${INSTRUMENT}"

  push_failure

  kcpmsg "invoking servlet as CORR2INI=${CORR_DIR}/${SUBARRAY}-${INSTRUMENT} corr2_sensor_servlet.py -n ${SUBARRAY}.${INSTRUMENT} -p ${port}"

  send_request   client-exec "monitor-${SUBARRAY}-${INSTRUMENT}" "${SUBARRAY}.monitor" kcprun -s ${SUBARRAY} -e error -o debug -n "CORR2INI=${CORR_DIR}/${SUBARRAY}-${INSTRUMENT}" corr2_sensor_servlet.py -n "${SUBARRAY}.${INSTRUMENT}" -p "${port}"
  retrieve_reply client-exec

  send_request   client-config client "monitor-${SUBARRAY}-${INSTRUMENT}"
  retrieve_reply client-config

  now=$(date +%s)
  timeout=$[now+120]

  kcpmsg "checking until ${timeout} for sensor monitor of ${INSTRUMENT} to be ready"

  while ! kcpcmd -irs localhost:${port} watchdog 2> /dev/null ; do

    now=$(date +%s)

    if [ "${now}" -ge "${timeout}" ] ; then
      kcpmsg -l warn  "sensor servlet not responsive so giving up"
      adjust_sensors
      return 1
    fi

    sleep 0.1
  done

  send_request   client-connect "localhost:${port}" "${SUBARRAY}.monitor" monitor
  retrieve_reply client-connect

  send_request   client-config   client   monitor
  retrieve_reply client-config

  send_request   client-config   fixed    monitor
  retrieve_reply client-config

  if ! pop_failure ; then
    kcpmsg -l error "unable to start or configure sensor monitor"
    adjust_sensors
    return 1
  fi

  kcpmsg "monitor up now attempting to subscribe to sensors"

  if ! activate_servlet_sensors monitor ; then
    kcpmsg -l warn "unable to subscribe to sensors for instrument ${INSTRUMENT}"
    adjust_sensors
    return 1
  fi

  kcpmsg "launched sensor loop for instrument ${INSTRUMENT}"

  adjust_sensors nominal
}

#########################################################

function monitor_info()
{
  kcpmsg "monitoring instrument ${INSTRUMENT} in array ${SUBARRAY}"

  echo "!monitor-info ok"
}

#########################################################

inhibit_logging
register_commands support

make_misc_sensors
launch_sensors

#################################################

main_loop
