#!/bin/bash

#################################################

export KATCP_LABEL=cmc.hardware

#################################################

# valid command names and their minimum parameter count
declare -A -r command_set=([start-monitor]=1)
declare -A -r command_help=([start-monitor]="start monitor for a given skarab")

#################################################

source cmc-lib.sh
source cmc-resource.sh
source cmc-instrument.sh

#################################################

### support functions: sensors ##########################

function make_misc_sensors()
{
  push_failure

  send_request   var-declare "*device-status*"      "sensor,map"
  retrieve_reply var-declare

  send_request   var-set device-status   "system\_health" string ":help"
  retrieve_reply var-set
  send_request   var-set device-status    discrete   string ":type"
  retrieve_reply var-set
  send_request   var-set device-status    nominal    string ":status"
  retrieve_reply var-set
  send_request   var-set device-status    ok         string ":value"
  retrieve_reply var-set

  send_request   var-set device-status    ok         string ":range#0"
  retrieve_reply var-set
  send_request   var-set device-status    degraded   string ":range#1"
  retrieve_reply var-set
  send_request   var-set device-status    fail       string ":range#2"
  retrieve_reply var-set

  return 0
}

### support functions: subscibe to servlet ##############

function subscribe_sensors()
{
  local key remote

  remote="$1"

  if [ -z "${remote}" ] ; then
    kcpmsg "need a remote party to query"
    return 1
  fi

  push_failure

  send_request relay "${remote}" relay "${remote}" sensor-list
  retrieve_inform relay

  if ! pop_failure  ; then
    kcpmsg -l warn "unable to interrogate sensors of ${remote}"
    return 1
  fi

  push_failure

# risky, we assume inform_result isn't clobbered
  for key in "${!inform_result[@]}" ; do
    send_request relay "${remote}" relay "${remote}" sensor-sampling "${key}" "auto"
    retrieve_inform relay
  done

  if ! pop_failure ; then
    kcpmsg -l warn "unable to subscribe to sensors of ${remote}"
    return 1
  fi

  return 0
}

function launch_skarab()
{
  local port status legit i timeout now skarab

  if [ -z "${1}" ] ; then
    kcpmsg -l error "require something to launch"
    return 1
  fi

  skarab="${1}"

  port=$(seq ${corr_base} ${corr_end} | grep -E -v -w $(netstat -tan | tr -s ' ' | grep '^tcp '  | cut -f4 -d ' '  | cut -f2 -d: | sort -nu | tr '\n' '|')0 | head -1)

  kcpmsg "selecting ${port} for sensor routines of skarab ${skarab}"

  push_failure

  send_request   client-exec "monitor-${skarab}" hardware kcprun -s ${skarab} -e error -o info corr2_hardware_sensor_servlet.py -p "${port}" --host "${skarab}"
  retrieve_reply client-exec

  send_request   client-config client "monitor-${skarab}"
  retrieve_reply client-config

  if ! pop_failure ; then
    kcpmsg -l error "unable to start hardware monitor servlet for skarab ${skarab}"
    return 1
  fi

  now=$(date +%s)
  timeout=$[now+120]

  kcpmsg "checking until ${timeout} for monitor of skarab ${skarab} to be ready"

  while ! kcpcmd -irs localhost:${port} watchdog 2> /dev/null ; do

    now=$(date +%s)

    if [ "${now}" -ge "${timeout}" ] ; then
      kcpmsg -l warn  "skarab ${skarab} not responsive so giving up"
      return 1
    fi

    sleep 0.1
  done

  send_request   client-connect "localhost:${port}" hardware ${skarab}
  retrieve_reply client-connect

  send_request   client-config   client   ${skarab}
  retrieve_reply client-config

  send_request   client-config   prefixed ${skarab}
  retrieve_reply client-config

  if ! pop_failure ; then
    kcpmsg -l error "unable to start or configure monitor for skarab ${skarab}"
    return 1
  fi

  if ! activate_servlet_sensors ${skarab} ; then
    kcpmsg -l warn "unable to subscribe to sensors for instrument ${INSTRUMENT}"
    return 1
  fi

  kcpmsg "launched monitor loop for skarab ${skarab}"
}

#########################################################

function start_monitor()
{
  local skarab

  shift

  skarab="$1"

  if [ -z "$1" ] ; then
    kcpmsg "need a device to start monitoring"
    echo "!start-monitor fail"
  fi

  if ! launch_skarab "${skarab}" ; then
    echo "!start-monitor fail"
  fi

  if ! subscribe_sensors "${skarab}" ; then
    echo "!start-monitor fail"
  fi

  echo "!start-monitor ok"
}

#########################################################

inhibit_logging
register_commands support

make_misc_sensors

#################################################

main_loop
