#!/bin/bash

#################################################

export KATCP_LABEL=cmc.hardware

#################################################

# valid command names and their minimum parameter count
declare -A -r command_set=([start-monitor]=1)
declare -A -r command_help=([start-monitor]="start monitor for a given skarab")
declare -A -r inform_set=([client-disconnected]=1 [sensor-status]=1)

#################################################

source cmc-lib.sh
source cmc-resource.sh
source cmc-instrument.sh

#################################################

### support functions: sensors ##########################

function make_misc_sensors()
{
  push_failure

  send_request   var-declare "*device-status*"      "sensor,map"
  retrieve_reply var-declare

  send_request   var-set device-status   "system\_health" string ":help"
  retrieve_reply var-set
  send_request   var-set device-status    discrete   string ":type"
  retrieve_reply var-set
  send_request   var-set device-status    nominal    string ":status"
  retrieve_reply var-set
  send_request   var-set device-status    ok         string ":value"
  retrieve_reply var-set

  send_request   var-set device-status    ok         string ":range#0"
  retrieve_reply var-set
  send_request   var-set device-status    degraded   string ":range#1"
  retrieve_reply var-set
  send_request   var-set device-status    fail       string ":range#2"
  retrieve_reply var-set

  return 0
}

### support functions: subscibe to servlet ##############

function client_disconnected()
{
  shift

  if [ "${1##skarab}" = "${1}" ] ; then
    return
  fi

  kcpmsg -l info "skarab ${1} disconnected, marking it unreachable"

  now=$(date +%s.%N)

  echo "#sensor-status ${now%???} 1 ${1}.device-status unreachable degraded"
}

function sensor_status()
{
  local skarab image prefix prev holder mode sensor image update reset

  shift
  shift

  if [ "${1}" != 1 ] ; then
    kcpmsg -l info "sensor update seems invalid with $*"
    return
  fi

  shift

  sensor="${1}"

  skarab="${sensor%%.*}"

  if [ "${skarab:0:6}" != skarab ] ; then
    kcpmsg -l warn "saw an unsolicited update of sensor ${sensor}"
    return
  fi

  prefix="resources:${skarab}"

  push_failure

  fetch_var "${prefix}"

  if ! pop_failure ; then
    kcpmsg -l warn "unable to query resource set for ${prefix}"
    return 1
  fi

  prev="${var_result[${prefix}:status]}"
  holder="${var_result[${prefix}:holder]}"
  mode="${var_result[${prefix}:mode]}"

  update="${prev}"

  kcpmsg "considering sensor ${sensor}, previous skarab status ${prev} in mode ${mode} with holder ${holder:-undefined}"

  if [ "${sensor#*.}" = boot-image ] ; then
    image="${3}"

    kcpmsg -l info "skarab ${skarab} has changed image to ${image}"

    if [ -z "${holder}" ] ; then
      if [ "${image}" = multiboot ] ; then
        update=up
      else
        update=standby
        reset=true
      fi
    fi
  fi

  if [ "${sensor#*.}" = device-status ] ; then

    kcpmsg -l info "skarab ${skarab} has changed device-status to ${2}"

    if [ "${2}" = nominal ] ; then
      update=up
    else
      update=standby
    fi
  fi

  if [ "${update}" != "${prev}" -o "${reset}" = true ] ; then
# what about drop mode ?

    if [ "${mode}" = auto ] ; then

      kcpmsg "attempting status update for skarab ${skarab} from ${prev} to ${update}"

      push_failure

      send_request   var-set  resources hardware string "${skarab}:holder"
      if retrieve_reply var-set ; then

        if [ -n "${reset}" ] ; then
          kcpmsg "about to issue reset request to ${skarab}"

          send_request relay "${skarab}" relay "${skarab}" reset-hardware-platform
          retrieve_reply relay

          kcpmsg "completed reset request to ${skarab}"

          clear_failure
        fi

        send_request   var-delete  "${prefix}:status"
        retrieve_reply var-delete

        send_request   var-set      resources ${update} string ":${skarab}:status"
        retrieve_reply var-set

        send_request   var-delete  "${prefix}:holder"
        retrieve_reply var-delete
      fi

      if ! pop_failure ; then
        kcpmsg -l error "problem adjusting the status of ${skarab} to ${update}"
      fi
    else
      kcpmsg "would have changed ${skarab} status from ${prev} to ${update} if it were not in mode ${mode}"
    fi
  fi
}

# function relay()
# {
#   shift
#
#   if [ "$#" -ne 5 ] ; then
#     kcpmsg -l info "odd sensor status update $*"
#     return
#   fi
#
#   if [ "$1" != 1 ] ; then
#     kcpmsg -l info "malformed sensor status update $*"
#     return
#   fi
#
#   echo "#sensor-status $*"
# }

function subscribe_sensors()
{
  local key remote

  remote="$1"

  if [ -z "${remote}" ] ; then
    kcpmsg "need a remote party to query"
    return 1
  fi

  push_failure

  send_request relay "${remote}" relay "${remote}" sensor-list
  retrieve_inform relay

  if ! pop_failure  ; then
    kcpmsg -l warn "unable to interrogate sensors of ${remote}"
    return 1
  fi

  push_failure

#  for key in "${!inform_result[@]}" ; do
#    send_request relay "${remote}" relay "${remote}" sensor-value
#    retrieve_inform relay
#  done

  send_request sensor-sampling "${remote}.boot-image" auto
  retrieve_reply sensor-sampling

  send_request sensor-sampling "${remote}.device-status" auto
  retrieve_reply sensor-sampling

  if ! pop_failure ; then
    kcpmsg -l warn "unable to subscribe to ${remote}.boot-image"
    return 1
  fi

#   push_failure
#
# # risky, we assume inform_result isn't clobbered
#   for key in "${!inform_result[@]}" ; do
#     send_request relay "${remote}" relay "${remote}" sensor-sampling "${key}" "auto"
#     retrieve_inform relay
#   done
#
#   if ! pop_failure ; then
#     kcpmsg -l warn "unable to subscribe to sensors of ${remote}"
#     return 1
#   fi

  return 0
}

function launch_skarab()
{
  local port status legit i timeout now skarab

  if [ -z "${1}" ] ; then
    kcpmsg -l error "require something to launch"
    return 1
  fi

  skarab="${1}"

  port=$(seq ${corr_base} ${corr_end} | grep -E -v -w $(netstat -tan | tr -s ' ' | grep '^tcp '  | cut -f4 -d ' '  | cut -f2 -d: | sort -nu | tr '\n' '|')0 | head -1)

  if [ "${port}" -le 1024 ] ; then
    kcpmsg -l error "picked unreasonable port ${port} and may have run out of free ports"
    return 1
  fi

  kcpmsg "selecting ${port} for sensor routines of skarab ${skarab}"

  push_failure

  send_request   client-exec "monitor-${skarab}" hardware nice kcprun -s ${skarab} -e error -o info corr2_hardware_sensor_servlet.py -p "${port}" --host "${skarab}"
  retrieve_reply client-exec

  send_request   client-config client "monitor-${skarab}"
  retrieve_reply client-config

  if ! pop_failure ; then
    kcpmsg -l error "unable to start hardware monitor servlet for skarab ${skarab}"
    return 1
  fi

  push_failure

  now=$(date +%s)
  timeout=$[now+120]

  kcpmsg "checking until ${timeout} for monitor of skarab ${skarab} to be ready"

  while ! kcpcmd -irs localhost:${port} watchdog 2> /dev/null ; do

    now=$(date +%s)

    if [ "${now}" -ge "${timeout}" ] ; then
      kcpmsg -l warn  "skarab ${skarab} not responsive so giving up"
      return 1
    fi

    sleep 0.1
  done

  send_request   client-connect "localhost:${port}" hardware ${skarab}
  retrieve_reply client-connect

  send_request   client-config   client   ${skarab}
  retrieve_reply client-config

  send_request   client-config   prefixed ${skarab}
  retrieve_reply client-config

  if ! pop_failure ; then
    kcpmsg -l error "unable to start or configure monitor for skarab ${skarab}"
    return 1
  fi

  kcpmsg "launched monitor loop for skarab ${skarab}"
}

#########################################################

function start_monitor()
{
  local skarab

  shift

  skarab="$1"

  if [ -z "$1" ] ; then
    kcpmsg "need a device to start monitoring"
    echo "!start-monitor fail"
  fi

  if ! launch_skarab "${skarab}" ; then
    echo "!start-monitor fail"
  fi

  if ! subscribe_sensors "${skarab}" ; then
    echo "!start-monitor fail"
  fi

  echo "!start-monitor ok"
}

#########################################################

inhibit_logging
self_config info-all
self_config fixed
permit_nul_sensors

register_commands support

make_misc_sensors

#################################################

main_loop
